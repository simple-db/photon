// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl/photon.proto

#ifndef PROTOBUF_idl_2fphoton_2eproto__INCLUDED
#define PROTOBUF_idl_2fphoton_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace photon {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_idl_2fphoton_2eproto();
void protobuf_AssignDesc_idl_2fphoton_2eproto();
void protobuf_ShutdownFile_idl_2fphoton_2eproto();

class Key;
class KeySet;
class Record;
class RecordSet;
class Status;
class StatusSet;
class Value;
class ValueSet;

// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  inline Key* New() const { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:photon.Key)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static Key* default_instance_;
};
// -------------------------------------------------------------------

class KeySet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.KeySet) */ {
 public:
  KeySet();
  virtual ~KeySet();

  KeySet(const KeySet& from);

  inline KeySet& operator=(const KeySet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeySet& default_instance();

  void Swap(KeySet* other);

  // implements Message ----------------------------------------------

  inline KeySet* New() const { return New(NULL); }

  KeySet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeySet& from);
  void MergeFrom(const KeySet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeySet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:photon.KeySet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static KeySet* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  inline Value* New() const { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:photon.Value)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class ValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.ValueSet) */ {
 public:
  ValueSet();
  virtual ~ValueSet();

  ValueSet(const ValueSet& from);

  inline ValueSet& operator=(const ValueSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSet& default_instance();

  void Swap(ValueSet* other);

  // implements Message ----------------------------------------------

  inline ValueSet* New() const { return New(NULL); }

  ValueSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValueSet& from);
  void MergeFrom(const ValueSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:photon.ValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static ValueSet* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  inline Record* New() const { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:photon.Record)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class RecordSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.RecordSet) */ {
 public:
  RecordSet();
  virtual ~RecordSet();

  RecordSet(const RecordSet& from);

  inline RecordSet& operator=(const RecordSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordSet& default_instance();

  void Swap(RecordSet* other);

  // implements Message ----------------------------------------------

  inline RecordSet* New() const { return New(NULL); }

  RecordSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordSet& from);
  void MergeFrom(const RecordSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecordSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated bytes values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:photon.RecordSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static RecordSet* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .photon.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::photon::Value& value() const;
  ::photon::Value* mutable_value();
  ::photon::Value* release_value();
  void set_allocated_value(::photon::Value* value);

  // @@protoc_insertion_point(class_scope:photon.Status)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::photon::Value* value_;
  ::google::protobuf::int32 ret_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class StatusSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:photon.StatusSet) */ {
 public:
  StatusSet();
  virtual ~StatusSet();

  StatusSet(const StatusSet& from);

  inline StatusSet& operator=(const StatusSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusSet& default_instance();

  void Swap(StatusSet* other);

  // implements Message ----------------------------------------------

  inline StatusSet* New() const { return New(NULL); }

  StatusSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusSet& from);
  void MergeFrom(const StatusSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatusSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // repeated .photon.Status statuses = 3;
  int statuses_size() const;
  void clear_statuses();
  static const int kStatusesFieldNumber = 3;
  const ::photon::Status& statuses(int index) const;
  ::photon::Status* mutable_statuses(int index);
  ::photon::Status* add_statuses();
  ::google::protobuf::RepeatedPtrField< ::photon::Status >*
      mutable_statuses();
  const ::google::protobuf::RepeatedPtrField< ::photon::Status >&
      statuses() const;

  // @@protoc_insertion_point(class_scope:photon.StatusSet)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::RepeatedPtrField< ::photon::Status > statuses_;
  ::google::protobuf::int32 ret_;
  friend void  protobuf_AddDesc_idl_2fphoton_2eproto();
  friend void protobuf_AssignDesc_idl_2fphoton_2eproto();
  friend void protobuf_ShutdownFile_idl_2fphoton_2eproto();

  void InitAsDefaultInstance();
  static StatusSet* default_instance_;
};
// ===================================================================

class PhotonDBService_Stub;

class PhotonDBService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PhotonDBService() {};
 public:
  virtual ~PhotonDBService();

  typedef PhotonDBService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void get(::google::protobuf::RpcController* controller,
                       const ::photon::Key* request,
                       ::photon::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void mget(::google::protobuf::RpcController* controller,
                       const ::photon::KeySet* request,
                       ::photon::StatusSet* response,
                       ::google::protobuf::Closure* done);
  virtual void set(::google::protobuf::RpcController* controller,
                       const ::photon::Record* request,
                       ::photon::Status* response,
                       ::google::protobuf::Closure* done);
  virtual void mset(::google::protobuf::RpcController* controller,
                       const ::photon::RecordSet* request,
                       ::photon::StatusSet* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhotonDBService);
};

class PhotonDBService_Stub : public PhotonDBService {
 public:
  PhotonDBService_Stub(::google::protobuf::RpcChannel* channel);
  PhotonDBService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PhotonDBService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PhotonDBService ------------------------------------------

  void get(::google::protobuf::RpcController* controller,
                       const ::photon::Key* request,
                       ::photon::Status* response,
                       ::google::protobuf::Closure* done);
  void mget(::google::protobuf::RpcController* controller,
                       const ::photon::KeySet* request,
                       ::photon::StatusSet* response,
                       ::google::protobuf::Closure* done);
  void set(::google::protobuf::RpcController* controller,
                       const ::photon::Record* request,
                       ::photon::Status* response,
                       ::google::protobuf::Closure* done);
  void mset(::google::protobuf::RpcController* controller,
                       const ::photon::RecordSet* request,
                       ::photon::StatusSet* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhotonDBService_Stub);
};


// -------------------------------------------------------------------

class PhotonCMDService_Stub;

class PhotonCMDService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PhotonCMDService() {};
 public:
  virtual ~PhotonCMDService();

  typedef PhotonCMDService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();


  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhotonCMDService);
};

class PhotonCMDService_Stub : public PhotonCMDService {
 public:
  PhotonCMDService_Stub(::google::protobuf::RpcChannel* channel);
  PhotonCMDService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PhotonCMDService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PhotonCMDService ------------------------------------------

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhotonCMDService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional bytes key = 1;
inline bool Key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:photon.Key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Key.key)
}
inline void Key::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Key.key)
}
inline void Key::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Key.key)
}
inline ::std::string* Key::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:photon.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:photon.Key.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:photon.Key.key)
}

// -------------------------------------------------------------------

// KeySet

// repeated bytes keys = 1;
inline int KeySet::keys_size() const {
  return keys_.size();
}
inline void KeySet::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& KeySet::keys(int index) const {
  // @@protoc_insertion_point(field_get:photon.KeySet.keys)
  return keys_.Get(index);
}
inline ::std::string* KeySet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:photon.KeySet.keys)
  return keys_.Mutable(index);
}
inline void KeySet::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.KeySet.keys)
  keys_.Mutable(index)->assign(value);
}
inline void KeySet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.KeySet.keys)
}
inline void KeySet::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.KeySet.keys)
}
inline ::std::string* KeySet::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:photon.KeySet.keys)
  return keys_.Add();
}
inline void KeySet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.KeySet.keys)
}
inline void KeySet::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.KeySet.keys)
}
inline void KeySet::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.KeySet.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeySet::keys() const {
  // @@protoc_insertion_point(field_list:photon.KeySet.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KeySet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:photon.KeySet.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// Value

// optional bytes value = 1;
inline bool Value::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:photon.Value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Value.value)
}
inline void Value::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Value.value)
}
inline void Value::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Value.value)
}
inline ::std::string* Value::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:photon.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:photon.Value.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:photon.Value.value)
}

// -------------------------------------------------------------------

// ValueSet

// repeated bytes values = 1;
inline int ValueSet::values_size() const {
  return values_.size();
}
inline void ValueSet::clear_values() {
  values_.Clear();
}
inline const ::std::string& ValueSet::values(int index) const {
  // @@protoc_insertion_point(field_get:photon.ValueSet.values)
  return values_.Get(index);
}
inline ::std::string* ValueSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:photon.ValueSet.values)
  return values_.Mutable(index);
}
inline void ValueSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.ValueSet.values)
  values_.Mutable(index)->assign(value);
}
inline void ValueSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.ValueSet.values)
}
inline void ValueSet::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.ValueSet.values)
}
inline ::std::string* ValueSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:photon.ValueSet.values)
  return values_.Add();
}
inline void ValueSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.ValueSet.values)
}
inline void ValueSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.ValueSet.values)
}
inline void ValueSet::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.ValueSet.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ValueSet::values() const {
  // @@protoc_insertion_point(field_list:photon.ValueSet.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ValueSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:photon.ValueSet.values)
  return &values_;
}

// -------------------------------------------------------------------

// Record

// optional bytes key = 1;
inline bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:photon.Record.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Record.key)
}
inline void Record::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Record.key)
}
inline void Record::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Record.key)
}
inline ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:photon.Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:photon.Record.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:photon.Record.key)
}

// optional bytes value = 2;
inline bool Record::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Record::value() const {
  // @@protoc_insertion_point(field_get:photon.Record.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Record.value)
}
inline void Record::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Record.value)
}
inline void Record::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Record.value)
}
inline ::std::string* Record::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:photon.Record.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_value() {
  // @@protoc_insertion_point(field_release:photon.Record.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:photon.Record.value)
}

// -------------------------------------------------------------------

// RecordSet

// repeated bytes keys = 1;
inline int RecordSet::keys_size() const {
  return keys_.size();
}
inline void RecordSet::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& RecordSet::keys(int index) const {
  // @@protoc_insertion_point(field_get:photon.RecordSet.keys)
  return keys_.Get(index);
}
inline ::std::string* RecordSet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:photon.RecordSet.keys)
  return keys_.Mutable(index);
}
inline void RecordSet::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.RecordSet.keys)
  keys_.Mutable(index)->assign(value);
}
inline void RecordSet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.RecordSet.keys)
}
inline void RecordSet::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.RecordSet.keys)
}
inline ::std::string* RecordSet::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:photon.RecordSet.keys)
  return keys_.Add();
}
inline void RecordSet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.RecordSet.keys)
}
inline void RecordSet::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.RecordSet.keys)
}
inline void RecordSet::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.RecordSet.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecordSet::keys() const {
  // @@protoc_insertion_point(field_list:photon.RecordSet.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RecordSet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:photon.RecordSet.keys)
  return &keys_;
}

// repeated bytes values = 2;
inline int RecordSet::values_size() const {
  return values_.size();
}
inline void RecordSet::clear_values() {
  values_.Clear();
}
inline const ::std::string& RecordSet::values(int index) const {
  // @@protoc_insertion_point(field_get:photon.RecordSet.values)
  return values_.Get(index);
}
inline ::std::string* RecordSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:photon.RecordSet.values)
  return values_.Mutable(index);
}
inline void RecordSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.RecordSet.values)
  values_.Mutable(index)->assign(value);
}
inline void RecordSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.RecordSet.values)
}
inline void RecordSet::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.RecordSet.values)
}
inline ::std::string* RecordSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:photon.RecordSet.values)
  return values_.Add();
}
inline void RecordSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.RecordSet.values)
}
inline void RecordSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.RecordSet.values)
}
inline void RecordSet::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.RecordSet.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecordSet::values() const {
  // @@protoc_insertion_point(field_list:photon.RecordSet.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RecordSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:photon.RecordSet.values)
  return &values_;
}

// -------------------------------------------------------------------

// Status

// optional int32 ret = 1;
inline bool Status::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Status::ret() const {
  // @@protoc_insertion_point(field_get:photon.Status.ret)
  return ret_;
}
inline void Status::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:photon.Status.ret)
}

// optional string msg = 2;
inline bool Status::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:photon.Status.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Status.msg)
}
inline void Status::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Status.msg)
}
inline void Status::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Status.msg)
}
inline ::std::string* Status::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:photon.Status.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:photon.Status.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:photon.Status.msg)
}

// optional .photon.Value value = 3;
inline bool Status::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_value() {
  if (value_ != NULL) value_->::photon::Value::Clear();
  clear_has_value();
}
inline const ::photon::Value& Status::value() const {
  // @@protoc_insertion_point(field_get:photon.Status.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::photon::Value* Status::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::photon::Value;
  }
  // @@protoc_insertion_point(field_mutable:photon.Status.value)
  return value_;
}
inline ::photon::Value* Status::release_value() {
  // @@protoc_insertion_point(field_release:photon.Status.value)
  clear_has_value();
  ::photon::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Status::set_allocated_value(::photon::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:photon.Status.value)
}

// -------------------------------------------------------------------

// StatusSet

// optional int32 ret = 1;
inline bool StatusSet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusSet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusSet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusSet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 StatusSet::ret() const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.ret)
  return ret_;
}
inline void StatusSet::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:photon.StatusSet.ret)
}

// optional string msg = 2;
inline bool StatusSet::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusSet::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusSet::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusSet::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& StatusSet::msg() const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusSet::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.StatusSet.msg)
}
inline void StatusSet::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.StatusSet.msg)
}
inline void StatusSet::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.StatusSet.msg)
}
inline ::std::string* StatusSet::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:photon.StatusSet.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusSet::release_msg() {
  // @@protoc_insertion_point(field_release:photon.StatusSet.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusSet::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:photon.StatusSet.msg)
}

// repeated .photon.Status statuses = 3;
inline int StatusSet::statuses_size() const {
  return statuses_.size();
}
inline void StatusSet::clear_statuses() {
  statuses_.Clear();
}
inline const ::photon::Status& StatusSet::statuses(int index) const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.statuses)
  return statuses_.Get(index);
}
inline ::photon::Status* StatusSet::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:photon.StatusSet.statuses)
  return statuses_.Mutable(index);
}
inline ::photon::Status* StatusSet::add_statuses() {
  // @@protoc_insertion_point(field_add:photon.StatusSet.statuses)
  return statuses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::photon::Status >*
StatusSet::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:photon.StatusSet.statuses)
  return &statuses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::photon::Status >&
StatusSet::statuses() const {
  // @@protoc_insertion_point(field_list:photon.StatusSet.statuses)
  return statuses_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace photon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_idl_2fphoton_2eproto__INCLUDED
