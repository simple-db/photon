// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: photon_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "photon_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace photon {

namespace {

const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeySet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeySet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMDStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMDStatus_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PhotonDBService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* PhotonCMDService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_photon_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_photon_5fservice_2eproto() {
  protobuf_AddDesc_photon_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "photon_service.proto");
  GOOGLE_CHECK(file != NULL);
  Key_descriptor_ = file->message_type(0);
  static const int Key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, key_),
  };
  Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Key_descriptor_,
      Key::default_instance_,
      Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _has_bits_[0]),
      -1,
      -1,
      sizeof(Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_),
      -1);
  KeySet_descriptor_ = file->message_type(1);
  static const int KeySet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeySet, keys_),
  };
  KeySet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeySet_descriptor_,
      KeySet::default_instance_,
      KeySet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeySet, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeySet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeySet, _internal_metadata_),
      -1);
  Value_descriptor_ = file->message_type(2);
  static const int Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, value_),
  };
  Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      -1,
      -1,
      sizeof(Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
      -1);
  ValueSet_descriptor_ = file->message_type(3);
  static const int ValueSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSet, values_),
  };
  ValueSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueSet_descriptor_,
      ValueSet::default_instance_,
      ValueSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(ValueSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSet, _internal_metadata_),
      -1);
  Record_descriptor_ = file->message_type(4);
  static const int Record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, value_),
  };
  Record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      -1,
      -1,
      sizeof(Record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
      -1);
  RecordSet_descriptor_ = file->message_type(5);
  static const int RecordSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSet, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSet, values_),
  };
  RecordSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecordSet_descriptor_,
      RecordSet::default_instance_,
      RecordSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(RecordSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSet, _internal_metadata_),
      -1);
  Status_descriptor_ = file->message_type(6);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, value_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      -1);
  StatusSet_descriptor_ = file->message_type(7);
  static const int StatusSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSet, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSet, statuses_),
  };
  StatusSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSet_descriptor_,
      StatusSet::default_instance_,
      StatusSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(StatusSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSet, _internal_metadata_),
      -1);
  CMD_descriptor_ = file->message_type(8);
  static const int CMD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, cmd_),
  };
  CMD_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMD_descriptor_,
      CMD::default_instance_,
      CMD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMD),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _internal_metadata_),
      -1);
  CMDStatus_descriptor_ = file->message_type(9);
  static const int CMDStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDStatus, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDStatus, msg_),
  };
  CMDStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMDStatus_descriptor_,
      CMDStatus::default_instance_,
      CMDStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMDStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMDStatus, _internal_metadata_),
      -1);
  PhotonDBService_descriptor_ = file->service(0);
  PhotonCMDService_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_photon_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Key_descriptor_, &Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeySet_descriptor_, &KeySet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueSet_descriptor_, &ValueSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecordSet_descriptor_, &RecordSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSet_descriptor_, &StatusSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMD_descriptor_, &CMD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMDStatus_descriptor_, &CMDStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_photon_5fservice_2eproto() {
  delete Key::default_instance_;
  delete Key_reflection_;
  delete KeySet::default_instance_;
  delete KeySet_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete ValueSet::default_instance_;
  delete ValueSet_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete RecordSet::default_instance_;
  delete RecordSet_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete StatusSet::default_instance_;
  delete StatusSet_reflection_;
  delete CMD::default_instance_;
  delete CMD_reflection_;
  delete CMDStatus::default_instance_;
  delete CMDStatus_reflection_;
}

void protobuf_AddDesc_photon_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_photon_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024photon_service.proto\022\006photon\"\022\n\003Key\022\013\n"
    "\003key\030\001 \001(\014\"\026\n\006KeySet\022\014\n\004keys\030\001 \003(\014\"\026\n\005Va"
    "lue\022\r\n\005value\030\001 \001(\014\"\032\n\010ValueSet\022\016\n\006values"
    "\030\001 \003(\014\"$\n\006Record\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002"
    " \001(\014\")\n\tRecordSet\022\014\n\004keys\030\001 \003(\014\022\016\n\006value"
    "s\030\002 \003(\014\"@\n\006Status\022\013\n\003ret\030\001 \001(\005\022\013\n\003msg\030\002 "
    "\001(\t\022\034\n\005value\030\003 \001(\0132\r.photon.Value\"G\n\tSta"
    "tusSet\022\013\n\003ret\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022 \n\010stat"
    "uses\030\003 \003(\0132\016.photon.Status\"\022\n\003CMD\022\013\n\003cmd"
    "\030\001 \001(\t\"\'\n\tCMDStatus\022\r\n\005error\030\001 \001(\005\022\013\n\003ms"
    "g\030\002 \001(\t2\265\001\n\017PhotonDBService\022\"\n\003get\022\013.pho"
    "ton.Key\032\016.photon.Status\022)\n\004mget\022\016.photon"
    ".KeySet\032\021.photon.StatusSet\022%\n\003set\022\016.phot"
    "on.Record\032\016.photon.Status\022,\n\004mset\022\021.phot"
    "on.RecordSet\032\021.photon.StatusSet29\n\020Photo"
    "nCMDService\022%\n\003cmd\022\013.photon.CMD\032\021.photon"
    ".CMDStatusB\003\200\001\001", 655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "photon_service.proto", &protobuf_RegisterTypes);
  Key::default_instance_ = new Key();
  KeySet::default_instance_ = new KeySet();
  Value::default_instance_ = new Value();
  ValueSet::default_instance_ = new ValueSet();
  Record::default_instance_ = new Record();
  RecordSet::default_instance_ = new RecordSet();
  Status::default_instance_ = new Status();
  StatusSet::default_instance_ = new StatusSet();
  CMD::default_instance_ = new CMD();
  CMDStatus::default_instance_ = new CMDStatus();
  Key::default_instance_->InitAsDefaultInstance();
  KeySet::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  ValueSet::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  RecordSet::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  StatusSet::default_instance_->InitAsDefaultInstance();
  CMD::default_instance_->InitAsDefaultInstance();
  CMDStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_photon_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_photon_5fservice_2eproto {
  StaticDescriptorInitializer_photon_5fservice_2eproto() {
    protobuf_AddDesc_photon_5fservice_2eproto();
  }
} static_descriptor_initializer_photon_5fservice_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.Key)
}

void Key::InitAsDefaultInstance() {
}

Key::Key(const Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.Key)
}

void Key::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:photon.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.Key)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.Key)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.Key)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.Key)
  return target;
}

int Key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.Key)
  int total_size = 0;

  // optional bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {

  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional bytes key = 1;
bool Key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:photon.Key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Key.key)
}
 void Key::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Key.key)
}
 void Key::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Key.key)
}
 ::std::string* Key::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:photon.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:photon.Key.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:photon.Key.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeySet::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeySet::KeySet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.KeySet)
}

void KeySet::InitAsDefaultInstance() {
}

KeySet::KeySet(const KeySet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.KeySet)
}

void KeySet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeySet::~KeySet() {
  // @@protoc_insertion_point(destructor:photon.KeySet)
  SharedDtor();
}

void KeySet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeySet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeySet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeySet_descriptor_;
}

const KeySet& KeySet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

KeySet* KeySet::default_instance_ = NULL;

KeySet* KeySet::New(::google::protobuf::Arena* arena) const {
  KeySet* n = new KeySet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeySet::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.KeySet)
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeySet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.KeySet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.KeySet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.KeySet)
  return false;
#undef DO_
}

void KeySet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.KeySet)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.KeySet)
}

::google::protobuf::uint8* KeySet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.KeySet)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.KeySet)
  return target;
}

int KeySet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.KeySet)
  int total_size = 0;

  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeySet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.KeySet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeySet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeySet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.KeySet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.KeySet)
    MergeFrom(*source);
  }
}

void KeySet::MergeFrom(const KeySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.KeySet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keys_.MergeFrom(from.keys_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeySet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.KeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeySet::CopyFrom(const KeySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.KeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeySet::IsInitialized() const {

  return true;
}

void KeySet::Swap(KeySet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeySet::InternalSwap(KeySet* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeySet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeySet_descriptor_;
  metadata.reflection = KeySet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeySet

// repeated bytes keys = 1;
int KeySet::keys_size() const {
  return keys_.size();
}
void KeySet::clear_keys() {
  keys_.Clear();
}
 const ::std::string& KeySet::keys(int index) const {
  // @@protoc_insertion_point(field_get:photon.KeySet.keys)
  return keys_.Get(index);
}
 ::std::string* KeySet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:photon.KeySet.keys)
  return keys_.Mutable(index);
}
 void KeySet::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.KeySet.keys)
  keys_.Mutable(index)->assign(value);
}
 void KeySet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.KeySet.keys)
}
 void KeySet::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.KeySet.keys)
}
 ::std::string* KeySet::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:photon.KeySet.keys)
  return keys_.Add();
}
 void KeySet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.KeySet.keys)
}
 void KeySet::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.KeySet.keys)
}
 void KeySet::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.KeySet.keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeySet::keys() const {
  // @@protoc_insertion_point(field_list:photon.KeySet.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
KeySet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:photon.KeySet.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.Value)
}

void Value::InitAsDefaultInstance() {
}

Value::Value(const Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:photon.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.Value)
  if (has_value()) {
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.Value)
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.Value)
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.Value)
  return target;
}

int Value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.Value)
  int total_size = 0;

  // optional bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional bytes value = 1;
bool Value::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Value::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Value::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:photon.Value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Value.value)
}
 void Value::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Value.value)
}
 void Value::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Value.value)
}
 ::std::string* Value::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:photon.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:photon.Value.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:photon.Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueSet::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueSet::ValueSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.ValueSet)
}

void ValueSet::InitAsDefaultInstance() {
}

ValueSet::ValueSet(const ValueSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.ValueSet)
}

void ValueSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValueSet::~ValueSet() {
  // @@protoc_insertion_point(destructor:photon.ValueSet)
  SharedDtor();
}

void ValueSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ValueSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueSet_descriptor_;
}

const ValueSet& ValueSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

ValueSet* ValueSet::default_instance_ = NULL;

ValueSet* ValueSet::New(::google::protobuf::Arena* arena) const {
  ValueSet* n = new ValueSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueSet::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.ValueSet)
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ValueSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.ValueSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes values = 1;
      case 1: {
        if (tag == 10) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.ValueSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.ValueSet)
  return false;
#undef DO_
}

void ValueSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.ValueSet)
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.ValueSet)
}

::google::protobuf::uint8* ValueSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.ValueSet)
  // repeated bytes values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.ValueSet)
  return target;
}

int ValueSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.ValueSet)
  int total_size = 0;

  // repeated bytes values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.ValueSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValueSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.ValueSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.ValueSet)
    MergeFrom(*source);
  }
}

void ValueSet::MergeFrom(const ValueSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.ValueSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  values_.MergeFrom(from.values_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ValueSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.ValueSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueSet::CopyFrom(const ValueSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.ValueSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSet::IsInitialized() const {

  return true;
}

void ValueSet::Swap(ValueSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueSet::InternalSwap(ValueSet* other) {
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueSet_descriptor_;
  metadata.reflection = ValueSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueSet

// repeated bytes values = 1;
int ValueSet::values_size() const {
  return values_.size();
}
void ValueSet::clear_values() {
  values_.Clear();
}
 const ::std::string& ValueSet::values(int index) const {
  // @@protoc_insertion_point(field_get:photon.ValueSet.values)
  return values_.Get(index);
}
 ::std::string* ValueSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:photon.ValueSet.values)
  return values_.Mutable(index);
}
 void ValueSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.ValueSet.values)
  values_.Mutable(index)->assign(value);
}
 void ValueSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.ValueSet.values)
}
 void ValueSet::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.ValueSet.values)
}
 ::std::string* ValueSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:photon.ValueSet.values)
  return values_.Add();
}
 void ValueSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.ValueSet.values)
}
 void ValueSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.ValueSet.values)
}
 void ValueSet::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.ValueSet.values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ValueSet::values() const {
  // @@protoc_insertion_point(field_list:photon.ValueSet.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ValueSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:photon.ValueSet.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kKeyFieldNumber;
const int Record::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:photon.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.Record)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.Record)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.Record)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.Record)
  return target;
}

int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.Record)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// optional bytes key = 1;
bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:photon.Record.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Record.key)
}
 void Record::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Record.key)
}
 void Record::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Record.key)
}
 ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:photon.Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:photon.Record.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:photon.Record.key)
}

// optional bytes value = 2;
bool Record::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Record::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Record::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Record::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Record::value() const {
  // @@protoc_insertion_point(field_get:photon.Record.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Record.value)
}
 void Record::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Record.value)
}
 void Record::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Record.value)
}
 ::std::string* Record::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:photon.Record.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value() {
  // @@protoc_insertion_point(field_release:photon.Record.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:photon.Record.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordSet::kKeysFieldNumber;
const int RecordSet::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordSet::RecordSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.RecordSet)
}

void RecordSet::InitAsDefaultInstance() {
}

RecordSet::RecordSet(const RecordSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.RecordSet)
}

void RecordSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordSet::~RecordSet() {
  // @@protoc_insertion_point(destructor:photon.RecordSet)
  SharedDtor();
}

void RecordSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordSet_descriptor_;
}

const RecordSet& RecordSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

RecordSet* RecordSet::default_instance_ = NULL;

RecordSet* RecordSet::New(::google::protobuf::Arena* arena) const {
  RecordSet* n = new RecordSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordSet::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.RecordSet)
  keys_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RecordSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.RecordSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated bytes values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.RecordSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.RecordSet)
  return false;
#undef DO_
}

void RecordSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.RecordSet)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // repeated bytes values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.RecordSet)
}

::google::protobuf::uint8* RecordSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.RecordSet)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // repeated bytes values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.RecordSet)
  return target;
}

int RecordSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.RecordSet)
  int total_size = 0;

  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // repeated bytes values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.RecordSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecordSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.RecordSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.RecordSet)
    MergeFrom(*source);
  }
}

void RecordSet::MergeFrom(const RecordSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.RecordSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RecordSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.RecordSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSet::CopyFrom(const RecordSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.RecordSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSet::IsInitialized() const {

  return true;
}

void RecordSet::Swap(RecordSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordSet::InternalSwap(RecordSet* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordSet_descriptor_;
  metadata.reflection = RecordSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordSet

// repeated bytes keys = 1;
int RecordSet::keys_size() const {
  return keys_.size();
}
void RecordSet::clear_keys() {
  keys_.Clear();
}
 const ::std::string& RecordSet::keys(int index) const {
  // @@protoc_insertion_point(field_get:photon.RecordSet.keys)
  return keys_.Get(index);
}
 ::std::string* RecordSet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:photon.RecordSet.keys)
  return keys_.Mutable(index);
}
 void RecordSet::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.RecordSet.keys)
  keys_.Mutable(index)->assign(value);
}
 void RecordSet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.RecordSet.keys)
}
 void RecordSet::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.RecordSet.keys)
}
 ::std::string* RecordSet::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:photon.RecordSet.keys)
  return keys_.Add();
}
 void RecordSet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.RecordSet.keys)
}
 void RecordSet::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.RecordSet.keys)
}
 void RecordSet::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.RecordSet.keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecordSet::keys() const {
  // @@protoc_insertion_point(field_list:photon.RecordSet.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RecordSet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:photon.RecordSet.keys)
  return &keys_;
}

// repeated bytes values = 2;
int RecordSet::values_size() const {
  return values_.size();
}
void RecordSet::clear_values() {
  values_.Clear();
}
 const ::std::string& RecordSet::values(int index) const {
  // @@protoc_insertion_point(field_get:photon.RecordSet.values)
  return values_.Get(index);
}
 ::std::string* RecordSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:photon.RecordSet.values)
  return values_.Mutable(index);
}
 void RecordSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:photon.RecordSet.values)
  values_.Mutable(index)->assign(value);
}
 void RecordSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:photon.RecordSet.values)
}
 void RecordSet::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:photon.RecordSet.values)
}
 ::std::string* RecordSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:photon.RecordSet.values)
  return values_.Add();
}
 void RecordSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:photon.RecordSet.values)
}
 void RecordSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:photon.RecordSet.values)
}
 void RecordSet::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:photon.RecordSet.values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecordSet::values() const {
  // @@protoc_insertion_point(field_list:photon.RecordSet.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RecordSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:photon.RecordSet.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kRetFieldNumber;
const int Status::kMsgFieldNumber;
const int Status::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.Status)
}

void Status::InitAsDefaultInstance() {
  value_ = const_cast< ::photon::Value*>(&::photon::Value::default_instance());
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.Status)
}

void Status::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:photon.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.Status)
  if (_has_bits_[0 / 32] & 7u) {
    ret_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::photon::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "photon.Status.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .photon.Value value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.Status)
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.Status.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .photon.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.Status)
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.Status.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional .photon.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.Status)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .photon.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_value()) {
      mutable_value()->::photon::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(ret_, other->ret_);
  msg_.Swap(&other->msg_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional int32 ret = 1;
bool Status::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::google::protobuf::int32 Status::ret() const {
  // @@protoc_insertion_point(field_get:photon.Status.ret)
  return ret_;
}
 void Status::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:photon.Status.ret)
}

// optional string msg = 2;
bool Status::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:photon.Status.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.Status.msg)
}
 void Status::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.Status.msg)
}
 void Status::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.Status.msg)
}
 ::std::string* Status::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:photon.Status.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:photon.Status.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:photon.Status.msg)
}

// optional .photon.Value value = 3;
bool Status::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_value() {
  if (value_ != NULL) value_->::photon::Value::Clear();
  clear_has_value();
}
const ::photon::Value& Status::value() const {
  // @@protoc_insertion_point(field_get:photon.Status.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::photon::Value* Status::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::photon::Value;
  }
  // @@protoc_insertion_point(field_mutable:photon.Status.value)
  return value_;
}
::photon::Value* Status::release_value() {
  // @@protoc_insertion_point(field_release:photon.Status.value)
  clear_has_value();
  ::photon::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void Status::set_allocated_value(::photon::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:photon.Status.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusSet::kRetFieldNumber;
const int StatusSet::kMsgFieldNumber;
const int StatusSet::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusSet::StatusSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.StatusSet)
}

void StatusSet::InitAsDefaultInstance() {
}

StatusSet::StatusSet(const StatusSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.StatusSet)
}

void StatusSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusSet::~StatusSet() {
  // @@protoc_insertion_point(destructor:photon.StatusSet)
  SharedDtor();
}

void StatusSet::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StatusSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSet_descriptor_;
}

const StatusSet& StatusSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

StatusSet* StatusSet::default_instance_ = NULL;

StatusSet* StatusSet::New(::google::protobuf::Arena* arena) const {
  StatusSet* n = new StatusSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSet::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.StatusSet)
  if (_has_bits_[0 / 32] & 3u) {
    ret_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StatusSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.StatusSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "photon.StatusSet.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_statuses;
        break;
      }

      // repeated .photon.Status statuses = 3;
      case 3: {
        if (tag == 26) {
         parse_statuses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_statuses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.StatusSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.StatusSet)
  return false;
#undef DO_
}

void StatusSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.StatusSet)
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.StatusSet.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // repeated .photon.Status statuses = 3;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statuses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.StatusSet)
}

::google::protobuf::uint8* StatusSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.StatusSet)
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.StatusSet.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // repeated .photon.Status statuses = 3;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->statuses(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.StatusSet)
  return target;
}

int StatusSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.StatusSet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .photon.Status statuses = 3;
  total_size += 1 * this->statuses_size();
  for (int i = 0; i < this->statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuses(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.StatusSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StatusSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.StatusSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.StatusSet)
    MergeFrom(*source);
  }
}

void StatusSet::MergeFrom(const StatusSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.StatusSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  statuses_.MergeFrom(from.statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StatusSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.StatusSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSet::CopyFrom(const StatusSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.StatusSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSet::IsInitialized() const {

  return true;
}

void StatusSet::Swap(StatusSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSet::InternalSwap(StatusSet* other) {
  std::swap(ret_, other->ret_);
  msg_.Swap(&other->msg_);
  statuses_.UnsafeArenaSwap(&other->statuses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSet_descriptor_;
  metadata.reflection = StatusSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSet

// optional int32 ret = 1;
bool StatusSet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatusSet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void StatusSet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatusSet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::google::protobuf::int32 StatusSet::ret() const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.ret)
  return ret_;
}
 void StatusSet::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:photon.StatusSet.ret)
}

// optional string msg = 2;
bool StatusSet::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatusSet::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void StatusSet::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatusSet::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& StatusSet::msg() const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSet::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.StatusSet.msg)
}
 void StatusSet::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.StatusSet.msg)
}
 void StatusSet::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.StatusSet.msg)
}
 ::std::string* StatusSet::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:photon.StatusSet.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSet::release_msg() {
  // @@protoc_insertion_point(field_release:photon.StatusSet.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSet::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:photon.StatusSet.msg)
}

// repeated .photon.Status statuses = 3;
int StatusSet::statuses_size() const {
  return statuses_.size();
}
void StatusSet::clear_statuses() {
  statuses_.Clear();
}
const ::photon::Status& StatusSet::statuses(int index) const {
  // @@protoc_insertion_point(field_get:photon.StatusSet.statuses)
  return statuses_.Get(index);
}
::photon::Status* StatusSet::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:photon.StatusSet.statuses)
  return statuses_.Mutable(index);
}
::photon::Status* StatusSet::add_statuses() {
  // @@protoc_insertion_point(field_add:photon.StatusSet.statuses)
  return statuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::photon::Status >*
StatusSet::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:photon.StatusSet.statuses)
  return &statuses_;
}
const ::google::protobuf::RepeatedPtrField< ::photon::Status >&
StatusSet::statuses() const {
  // @@protoc_insertion_point(field_list:photon.StatusSet.statuses)
  return statuses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMD::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMD::CMD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.CMD)
}

void CMD::InitAsDefaultInstance() {
}

CMD::CMD(const CMD& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.CMD)
}

void CMD::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD::~CMD() {
  // @@protoc_insertion_point(destructor:photon.CMD)
  SharedDtor();
}

void CMD::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_descriptor_;
}

const CMD& CMD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

CMD* CMD::default_instance_ = NULL;

CMD* CMD::New(::google::protobuf::Arena* arena) const {
  CMD* n = new CMD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.CMD)
  if (has_cmd()) {
    cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.CMD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "photon.CMD.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.CMD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.CMD)
  return false;
#undef DO_
}

void CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.CMD)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.CMD.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.CMD)
}

::google::protobuf::uint8* CMD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.CMD)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.CMD.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.CMD)
  return target;
}

int CMD::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.CMD)
  int total_size = 0;

  // optional string cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.CMD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CMD* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.CMD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.CMD)
    MergeFrom(*source);
  }
}

void CMD::MergeFrom(const CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.CMD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD::CopyFrom(const CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD::IsInitialized() const {

  return true;
}

void CMD::Swap(CMD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMD::InternalSwap(CMD* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_descriptor_;
  metadata.reflection = CMD_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMD

// optional string cmd = 1;
bool CMD::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMD::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void CMD::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMD::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
 const ::std::string& CMD::cmd() const {
  // @@protoc_insertion_point(field_get:photon.CMD.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMD::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.CMD.cmd)
}
 void CMD::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.CMD.cmd)
}
 void CMD::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.CMD.cmd)
}
 ::std::string* CMD::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:photon.CMD.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMD::release_cmd() {
  // @@protoc_insertion_point(field_release:photon.CMD.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMD::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:photon.CMD.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMDStatus::kErrorFieldNumber;
const int CMDStatus::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMDStatus::CMDStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:photon.CMDStatus)
}

void CMDStatus::InitAsDefaultInstance() {
}

CMDStatus::CMDStatus(const CMDStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:photon.CMDStatus)
}

void CMDStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMDStatus::~CMDStatus() {
  // @@protoc_insertion_point(destructor:photon.CMDStatus)
  SharedDtor();
}

void CMDStatus::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMDStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMDStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMDStatus_descriptor_;
}

const CMDStatus& CMDStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photon_5fservice_2eproto();
  return *default_instance_;
}

CMDStatus* CMDStatus::default_instance_ = NULL;

CMDStatus* CMDStatus::New(::google::protobuf::Arena* arena) const {
  CMDStatus* n = new CMDStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMDStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:photon.CMDStatus)
  if (_has_bits_[0 / 32] & 3u) {
    error_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMDStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:photon.CMDStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "photon.CMDStatus.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:photon.CMDStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:photon.CMDStatus)
  return false;
#undef DO_
}

void CMDStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:photon.CMDStatus)
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.CMDStatus.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:photon.CMDStatus)
}

::google::protobuf::uint8* CMDStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon.CMDStatus)
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "photon.CMDStatus.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon.CMDStatus)
  return target;
}

int CMDStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:photon.CMDStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMDStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon.CMDStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CMDStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMDStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon.CMDStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon.CMDStatus)
    MergeFrom(*source);
  }
}

void CMDStatus::MergeFrom(const CMDStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon.CMDStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMDStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon.CMDStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMDStatus::CopyFrom(const CMDStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon.CMDStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMDStatus::IsInitialized() const {

  return true;
}

void CMDStatus::Swap(CMDStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMDStatus::InternalSwap(CMDStatus* other) {
  std::swap(error_, other->error_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMDStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMDStatus_descriptor_;
  metadata.reflection = CMDStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMDStatus

// optional int32 error = 1;
bool CMDStatus::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMDStatus::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void CMDStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMDStatus::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::google::protobuf::int32 CMDStatus::error() const {
  // @@protoc_insertion_point(field_get:photon.CMDStatus.error)
  return error_;
}
 void CMDStatus::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:photon.CMDStatus.error)
}

// optional string msg = 2;
bool CMDStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMDStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void CMDStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMDStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& CMDStatus::msg() const {
  // @@protoc_insertion_point(field_get:photon.CMDStatus.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:photon.CMDStatus.msg)
}
 void CMDStatus::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:photon.CMDStatus.msg)
}
 void CMDStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:photon.CMDStatus.msg)
}
 ::std::string* CMDStatus::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:photon.CMDStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMDStatus::release_msg() {
  // @@protoc_insertion_point(field_release:photon.CMDStatus.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:photon.CMDStatus.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PhotonDBService::~PhotonDBService() {}

const ::google::protobuf::ServiceDescriptor* PhotonDBService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotonDBService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PhotonDBService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotonDBService_descriptor_;
}

void PhotonDBService::get(::google::protobuf::RpcController* controller,
                         const ::photon::Key*,
                         ::photon::Status*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get() not implemented.");
  done->Run();
}

void PhotonDBService::mget(::google::protobuf::RpcController* controller,
                         const ::photon::KeySet*,
                         ::photon::StatusSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mget() not implemented.");
  done->Run();
}

void PhotonDBService::set(::google::protobuf::RpcController* controller,
                         const ::photon::Record*,
                         ::photon::Status*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method set() not implemented.");
  done->Run();
}

void PhotonDBService::mset(::google::protobuf::RpcController* controller,
                         const ::photon::RecordSet*,
                         ::photon::StatusSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mset() not implemented.");
  done->Run();
}

void PhotonDBService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PhotonDBService_descriptor_);
  switch(method->index()) {
    case 0:
      get(controller,
             ::google::protobuf::down_cast<const ::photon::Key*>(request),
             ::google::protobuf::down_cast< ::photon::Status*>(response),
             done);
      break;
    case 1:
      mget(controller,
             ::google::protobuf::down_cast<const ::photon::KeySet*>(request),
             ::google::protobuf::down_cast< ::photon::StatusSet*>(response),
             done);
      break;
    case 2:
      set(controller,
             ::google::protobuf::down_cast<const ::photon::Record*>(request),
             ::google::protobuf::down_cast< ::photon::Status*>(response),
             done);
      break;
    case 3:
      mset(controller,
             ::google::protobuf::down_cast<const ::photon::RecordSet*>(request),
             ::google::protobuf::down_cast< ::photon::StatusSet*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PhotonDBService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::photon::Key::default_instance();
    case 1:
      return ::photon::KeySet::default_instance();
    case 2:
      return ::photon::Record::default_instance();
    case 3:
      return ::photon::RecordSet::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PhotonDBService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::photon::Status::default_instance();
    case 1:
      return ::photon::StatusSet::default_instance();
    case 2:
      return ::photon::Status::default_instance();
    case 3:
      return ::photon::StatusSet::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PhotonDBService_Stub::PhotonDBService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PhotonDBService_Stub::PhotonDBService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PhotonDBService_Stub::~PhotonDBService_Stub() {
  if (owns_channel_) delete channel_;
}

void PhotonDBService_Stub::get(::google::protobuf::RpcController* controller,
                              const ::photon::Key* request,
                              ::photon::Status* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PhotonDBService_Stub::mget(::google::protobuf::RpcController* controller,
                              const ::photon::KeySet* request,
                              ::photon::StatusSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PhotonDBService_Stub::set(::google::protobuf::RpcController* controller,
                              const ::photon::Record* request,
                              ::photon::Status* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PhotonDBService_Stub::mset(::google::protobuf::RpcController* controller,
                              const ::photon::RecordSet* request,
                              ::photon::StatusSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

PhotonCMDService::~PhotonCMDService() {}

const ::google::protobuf::ServiceDescriptor* PhotonCMDService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotonCMDService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PhotonCMDService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotonCMDService_descriptor_;
}

void PhotonCMDService::cmd(::google::protobuf::RpcController* controller,
                         const ::photon::CMD*,
                         ::photon::CMDStatus*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cmd() not implemented.");
  done->Run();
}

void PhotonCMDService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PhotonCMDService_descriptor_);
  switch(method->index()) {
    case 0:
      cmd(controller,
             ::google::protobuf::down_cast<const ::photon::CMD*>(request),
             ::google::protobuf::down_cast< ::photon::CMDStatus*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PhotonCMDService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::photon::CMD::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PhotonCMDService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::photon::CMDStatus::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PhotonCMDService_Stub::PhotonCMDService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PhotonCMDService_Stub::PhotonCMDService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PhotonCMDService_Stub::~PhotonCMDService_Stub() {
  if (owns_channel_) delete channel_;
}

void PhotonCMDService_Stub::cmd(::google::protobuf::RpcController* controller,
                              const ::photon::CMD* request,
                              ::photon::CMDStatus* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace photon

// @@protoc_insertion_point(global_scope)
